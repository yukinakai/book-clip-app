# プロジェクトルール

## コミットルール
- 機能追加: feat: 説明
- バグ修正: fix: 説明
- ドキュメント: docs: 説明
- リファクタリング: refactor: 説明
- テスト: test: 説明
- スタイル修正: style: 説明
- パフォーマンス改善: perf: 説明
- その他: chore: 説明

## 開発ルール
1. TDDを実践する
2. コンポーネントは小さく保つ
3. 関数は単一責任の原則に従う
4. TypeScriptの型定義を徹底する
5. コメントは必要最小限に抑える
6. テストカバレッジは80%以上を維持する
7. エラーハンドリングを適切に行う
8. パスエイリアスを使用したインポートを徹底する
   - @/*: srcディレクトリ
   - @components/*: コンポーネント
   - @contexts/*: コンテキスト
   - @hooks/*: カスタムフック
   - @lib/*: ライブラリ
   - @utils/*: ユーティリティ
   - @constants/*: 定数
   - @assets/*: アセット
9. ファイルの役割に応じて適切なディレクトリに配置する
10. テストファイルは対象ファイルと同じディレクトリ構造で__tests__ディレクトリに配置する

## ブランチ戦略
- main: プロダクションブランチ
- develop: 開発ブランチ
- feature/*: 機能追加ブランチ
- fix/*: バグ修正ブランチ
- release/*: リリース準備ブランチ

## コードレビュー基準
1. 機能要件の充足
2. テストの網羅性
3. コードの可読性
4. エラーハンドリング
5. パフォーマンス
6. セキュリティ

## ドキュメント管理
- PRD.md: プロダクト要件定義
- ARCHITECTURE.md: アーキテクチャ設計
- PRODUCT_OVERVIEW.md: プロダクト概要
- PROGRESS.md: 進捗管理
- DIRECTORY.md: ディレクトリ構造
