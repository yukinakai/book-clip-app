---
description: Jest モックに関する教訓(React を直接参照できないエラー
globs: *.test.tsx
alwaysApply: false
---
# Jest モックに関する教訓

## React を直接参照できないエラー

### 問題

Jest のモックでは、React モジュールを直接参照できないことがあります。これは、Jest の実行環境と React の参照方法に関連する問題です。

### 解決策

以下のアプローチを検討してください：

1. **モジュールモックの使用**

   ```javascript
   // 直接Reactを参照する代わりに
   jest.mock("react", () => ({
     ...jest.requireActual("react"),
     // 必要な関数やフックをここでモック
   }));
   ```

2. **テスト対象コンポーネントの依存関係を分離**

   - コンポーネントの依存関係を明示的に props として渡す
   - 依存関係を別のモジュールに抽出し、そのモジュールをモック

3. **React Testing Library の活用**

   - モックよりもユーザー操作をシミュレートするアプローチを優先
   - コンポーネントの実装詳細ではなく、動作をテスト

4. **jest.spyOn()の使用**
   ```javascript
   // Reactモジュール全体ではなく特定のメソッドをスパイ
   jest
     .spyOn(React, "useState")
     .mockImplementation(() => [initialState, setState]);
   ```

### 注意点

- テストでは実装詳細ではなく、コンポーネントの動作に焦点を当てる
- 過度なモックは避け、実際の動作に近いテスト環境を維持する
- モックが必要な場合は、最小限の範囲にとどめる

### 参考リソース

- [Jest 公式ドキュメント - Manual Mocks](mdc:https:/jestjs.io/docs/manual-mocks)
- [React Testing Library - ガイド](mdc:https:/testing-library.com/docs/react-testing-library/intro)

## モックモジュール内での外部変数参照の制限

### 問題

Jestのモックモジュール内（`jest.mock()`のコールバック関数内）では、外部で定義された変数を直接参照することができません。以下のようなコードはエラーになります：

```javascript
// 外部で定義されたモジュールやオブジェクト
import * as MediaLibrary from "expo-media-library";

// ❌ エラー: モックモジュール内でMediaLibraryを参照している
jest.mock("../../components/SomeComponent", () => {
  return (props) => {
    const React = require("react");
    return React.createElement("div", {
      onClick: async () => {
        // 外部で定義されたMediaLibraryを参照 - これがエラーの原因
        await MediaLibrary.saveToLibraryAsync("file://test/photo.jpg");
      }
    });
  };
});
```

エラーメッセージの例：
```
ReferenceError: The module factory of `jest.mock()` is not allowed to reference any out-of-scope variables.
Invalid variable access: MediaLibrary
```

### 解決策

以下のアプローチで問題を解決できます：

1. **`mockImplementation`を使用する**

   ```javascript
   // ✅ 正しい方法: モジュールを直接モックせず、実装を置き換える
   jest.mock("../../components/SomeComponent");
   
   // モジュールをインポート
   import SomeComponent from "../../components/SomeComponent";
   import * as MediaLibrary from "expo-media-library";
   
   // テスト内でモック実装を設定
   SomeComponent.mockImplementation((props) => {
     // ここでは外部変数MediaLibraryを参照できる
     return <div onClick={() => MediaLibrary.saveToLibraryAsync("file://test/photo.jpg")} />;
   });
   ```

2. **モック変数を使用する**

   ```javascript
   // ✅ 正しい方法: mockプレフィックスの変数を使用
   const mockMediaLibrary = {
     saveToLibraryAsync: jest.fn().mockResolvedValue(undefined)
   };
   
   jest.mock("../../components/SomeComponent", () => {
     return (props) => {
       const React = require("react");
       return React.createElement("div", {
         onClick: async () => {
           // mockプレフィックス付きなので参照可能
           await mockMediaLibrary.saveToLibraryAsync("file://test/photo.jpg");
         }
       });
     };
   });
   ```

3. **別のテストコンポーネントを作成し、通常のJSXで実装する**

   ```javascript
   // ✅ 正しい方法: モック用の独立コンポーネントを定義
   function TestComponent(props) {
     // 外部のMediaLibraryを使用しないように実装
     return <div onClick={() => props.onCapture("file://test/photo.jpg")} />;
   }
   
   // もとのコンポーネントをモックして、TestComponentを使用
   jest.mock("../../components/SomeComponent", () => {
     return jest.fn().mockImplementation((props) => {
       const React = require("react");
       return React.createElement(TestComponent, props);
     });
   });
   ```

### 注意点

- Jestのモジュールモック内では、モック対象のモジュール内の機能のみをモックする
- 外部依存を参照する必要がある場合は、モック内で`require`を使用するか、モック外で処理する
- 複雑なモックが必要な場合は、モックモジュールを別ファイルに分離することも検討する
- `mock`プレフィックス（大文字小文字を区別しない）で始まる変数名はモジュールモック内で参照可能

### 参考リソース

- [Jest 公式ドキュメント - モックの制限](mdc:https:/jestjs.io/docs/mock-functions#mock-implementations)
- [Jest モジュールモックの範囲](mdc:https:/jestjs.io/docs/jest-object#jestmockmodulename-factory-options)

