---
description: 未使用変数の取り扱いガイドライン
globs: 
alwaysApply: false
---
# 未使用変数の取り扱いガイドライン

## 基本原則

未使用変数は基本的に削除することを推奨します。理由は以下の通りです：

1. **コードの可読性向上**: 使われていない変数は読み手に混乱を与えます
2. **メモリ効率**: 不要な変数はメモリを消費します
3. **リンターの警告解消**: ESLintは未使用変数を検出して警告します

## 対応方法

### 1. 基本的には削除する

```typescript
// 悪い例
const unusedVariable = "value"; // 使われていない
function doSomething() { 
  // unusedVariableを使わない処理
}

// 良い例
function doSomething() {
  // 必要な処理のみ
}
```

### 2. アンダースコアプレフィックスを使用する場合

以下のケースでは、完全に削除せず、アンダースコアプレフィックス（`_`）を付けて残すことを検討します：

#### 型情報のために必要な場合

```typescript
// Jest等のモックでは型情報を保持する目的で使用する場合がある
const _originalModule = jest.requireActual("../path/to/module");
```

#### 分割代入で一部のプロパティのみを使う場合

```typescript
// 分割代入で一部のみ使用する場合
const { used, _unused } = object;
// または
const [first, _second] = array;
```

## 注意点

1. **アンダースコアは明確な理由がある場合のみ使用**: 単に警告を消すためだけにアンダースコアを付けるのは避けましょう
2. **コメントで理由を説明**: 未使用の変数をアンダースコアで残す場合、なぜ残しているのかコメントで説明しましょう
3. **定期的な見直し**: 開発が進むにつれ、一時的に残していた未使用変数が本当に必要かどうか再評価しましょう

## リンター設定

ESLintでは、未使用変数に関する警告を調整できます：

```javascript
// .eslintrc.js
module.exports = {
  rules: {
    'no-unused-vars': ['error', { 
      'argsIgnorePattern': '^_',
      'varsIgnorePattern': '^_'
    }]
  }
};
```

この設定では、`_`で始まる変数名や引数名は未使用でも警告されません。


## catchブロックでのパラメータ省略

catchブロックからパラメータを省略する方法は、コードの意図をより明確に表現できる優れた方法です。エラーオブジェクト自体に関心がない場合、このシンプルな書き方が最適です。
